name: Pre-deploy checks
on: [ push ]
jobs:
  Security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # https://github.com/symfonycorp/security-checker-action
      - name: Cache
        uses: actions/cache@v2
        id: cache-db
        with:
          path: ~/.symfony/cache
          key: db
      # https://github.com/sensiolabs/security-checker
      - name: Security check installed dependencies
        uses: symfonycorp/security-checker-action@v4
  Phpstan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      # https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-scripts --ignore-platform-reqs

      #      TODO: Lint translations

      - name: PHPStan
        run: vendor/bin/phpstan analyse src tests --error-format=github --memory-limit 1G > phpstan_report.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phpstan_report.json
          path: phpstan_report.json

  Phpcs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: PHP Code sniffer
        uses: pipeline-components/php-codesniffer@v0.12.3
        with:
          directory: src/ tests/
          options: -s -p --colors --extensions=php

  Tests:
    name: 'Tests'
    runs-on: ubuntu-latest
    env:
      XDEBUG_MODE: coverage
      APP_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install intl extension
        run: sudo apt-get install -y php8.1-intl
      - name: Up PostgreSQL
        run: docker compose -f docker-compose.yml up -d
      # Composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Install Composer dependencies
        run: composer install --no-interaction
      - name: Create database
        run: bin/console --env=test d:d:c --if-not-exists
      - name: Run migrations
        run: bin/console --env=test doctrine:mi:mi -n
#      - name: Load fixtures
#        run: bin/console --env=test d:f:l -n
      - name: PHPUnit
        run: vendor/bin/phpunit --configuration phpunit.xml.dist --coverage-html coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage
